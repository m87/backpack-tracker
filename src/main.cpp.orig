#include <iostream>
#include <opencv2/opencv.hpp>
#include "preprocessor.h"
#include <string>
using namespace std;
using namespace cv;

int main(int argc, char *argv[])
{



    Preprocessor prep(argv[1],3);
    namedWindow("capture", CV_WINDOW_AUTOSIZE);
    namedWindow("op", CV_WINDOW_AUTOSIZE);

    Mat frameNew, frameLast, frameDiff, freamReal;
    Mat tmp, grad_x,grad_y,abs_grad_x,abs_grad_y; 
    Mat frameDiff1;
    Mat element,grad;

    BackgroundSubtractorMOG2 bg;

    vector<vector<Point> > contours;
        prep.getFrame(frameNew,500.0f, -1.0f, true);
    while(true) {
        //prep.skipNFrames(1);
        frameNew.copyTo(frameLast);    
        prep.getFrame(frameNew,freamReal,500.0f,-1.0f,  true);
        
        /*frameDiff = frameLast - frameNew;

        element = prep.getStructuringElement(1,0);

        morphologyEx(frameDiff, tmp, 1, element);
        */
        
        bg(frameNew, frameDiff);
        erode(frameDiff,frameDiff, Mat());
        dilate(frameDiff,frameDiff,Mat());

        findContours(frameDiff,contours,CV_RETR_EXTERNAL,CV_CHAIN_APPROX_NONE);


         for(unsigned long i = 0; i < contours.size(); i++  )
                  { approxPolyDP( Mat(contours[i]), contours_poly[i], 3, true  );
                         boundRect[i] = boundingRect( Mat(contours_poly[i])  );
                         minEnclosingCircle( (Mat)contours_poly[i], center[i], radius[i]  );
                       }

        prep.saveFrame(frameDiff);
        
        imshow("capture", freamReal);
        imshow("op", frameNew);
        if (waitKey(20) >= 0)
          break;
        
        
    }

    return 0;
}
